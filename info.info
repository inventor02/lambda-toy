-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from src/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseToy -> Expr                            (0)
	Expr -> lit                                        (1)
	Expr -> true                                       (2)
	Expr -> false                                      (3)
	Expr -> Expr '<' Expr                              (4)
	Expr -> Expr '+' Expr                              (5)
	Expr -> var                                        (6)
	Expr -> '\\' '(' var ':' Type ')' Expr             (7)
	Expr -> let '(' var ':' Type ')' '=' Expr in Expr   (8)
	Expr -> Expr Expr                                  (9)
	Expr -> if Expr then Expr else Expr                (10)
	Type -> Int                                        (11)
	Type -> Bool                                       (12)
	Type -> Type '->' Type                             (13)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	Int            { TokenInt _ }
	Bool           { TokenBool _ }
	lit            { TokenLit _ $$ }
	true           { TokenTrue _ }
	false          { TokenFalse _ }
	'<'            { TokenLessThan _ }
	'+'            { TokenPlus _ }
	var            { TokenVar _ $$ }
	if             { TokenIf _ }
	then           { TokenThen _ }
	else           { TokenElse _ }
	'\\'           { TokenBackslash _ }
	'('            { TokenOpenBrack _ }
	')'            { TokenCloseBrack _ }
	':'            { TokenColon _ }
	let            { TokenLet _ }
	in             { TokenIn _ }
	'='            { TokenEquals _ }
	'->'           { TokenArrow _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseToy rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
	Type            rules 11, 12, 13

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseToy -> . Expr                           (rule 0)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 3

State 1

	Expr -> . lit                                       (rule 1)

	lit            shift, and enter state 2


State 2

	Expr -> lit .                                       (rule 1)

	lit            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'<'            reduce using rule 1
	'+'            reduce using rule 1
	var            reduce using rule 1
	if             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	'\\'           reduce using rule 1
	let            reduce using rule 1
	in             reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parseToy -> Expr .                           (rule 0)
	Expr -> Expr . '<' Expr                             (rule 4)
	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> Expr . Expr                                 (rule 9)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	'<'            shift, and enter state 14
	'+'            shift, and enter state 15
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9
	%eof           accept

	Expr           goto state 13

State 4

	Expr -> true .                                      (rule 2)

	lit            reduce using rule 2
	true           reduce using rule 2
	false          reduce using rule 2
	'<'            reduce using rule 2
	'+'            reduce using rule 2
	var            reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	'\\'           reduce using rule 2
	let            reduce using rule 2
	in             reduce using rule 2
	%eof           reduce using rule 2


State 5

	Expr -> false .                                     (rule 3)

	lit            reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	'<'            reduce using rule 3
	'+'            reduce using rule 3
	var            reduce using rule 3
	if             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	'\\'           reduce using rule 3
	let            reduce using rule 3
	in             reduce using rule 3
	%eof           reduce using rule 3


State 6

	Expr -> var .                                       (rule 6)

	lit            reduce using rule 6
	true           reduce using rule 6
	false          reduce using rule 6
	'<'            reduce using rule 6
	'+'            reduce using rule 6
	var            reduce using rule 6
	if             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	'\\'           reduce using rule 6
	let            reduce using rule 6
	in             reduce using rule 6
	%eof           reduce using rule 6


State 7

	Expr -> if . Expr then Expr else Expr               (rule 10)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 12

State 8

	Expr -> '\\' . '(' var ':' Type ')' Expr            (rule 7)

	'('            shift, and enter state 11


State 9

	Expr -> let . '(' var ':' Type ')' '=' Expr in Expr    (rule 8)

	'('            shift, and enter state 10


State 10

	Expr -> let '(' . var ':' Type ')' '=' Expr in Expr    (rule 8)

	var            shift, and enter state 20


State 11

	Expr -> '\\' '(' . var ':' Type ')' Expr            (rule 7)

	var            shift, and enter state 19


State 12

	Expr -> Expr . '<' Expr                             (rule 4)
	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> Expr . Expr                                 (rule 9)
	Expr -> if Expr . then Expr else Expr               (rule 10)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	'<'            shift, and enter state 14
	'+'            shift, and enter state 15
	var            shift, and enter state 6
	if             shift, and enter state 7
	then           shift, and enter state 18
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 13

State 13

	Expr -> Expr . '<' Expr                             (rule 4)
	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> Expr . Expr                                 (rule 9)
	Expr -> Expr Expr .                                 (rule 9)

	lit            reduce using rule 9
	true           reduce using rule 9
	false          reduce using rule 9
	'<'            reduce using rule 9
	'+'            reduce using rule 9
	var            reduce using rule 9
	if             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	'\\'           reduce using rule 9
	let            reduce using rule 9
	in             reduce using rule 9
	%eof           reduce using rule 9

	Expr           goto state 13

State 14

	Expr -> Expr '<' . Expr                             (rule 4)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 17

State 15

	Expr -> Expr '+' . Expr                             (rule 5)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 16

State 16

	Expr -> Expr . '<' Expr                             (rule 4)
	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> Expr '+' Expr .                             (rule 5)
	Expr -> Expr . Expr                                 (rule 9)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	'<'            reduce using rule 5
	'+'            reduce using rule 5
	var            shift, and enter state 6
	if             shift, and enter state 7
	then           reduce using rule 5
	else           reduce using rule 5
	'\\'           shift, and enter state 8
	let            reduce using rule 5
	in             reduce using rule 5
	%eof           reduce using rule 5

	Expr           goto state 13

State 17

	Expr -> Expr . '<' Expr                             (rule 4)
	Expr -> Expr '<' Expr .                             (rule 4)
	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> Expr . Expr                                 (rule 9)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	'<'            fail
	'+'            shift, and enter state 15
	var            shift, and enter state 6
	if             shift, and enter state 7
	then           reduce using rule 4
	else           reduce using rule 4
	'\\'           shift, and enter state 8
	let            reduce using rule 4
	in             reduce using rule 4
	%eof           reduce using rule 4

	Expr           goto state 13

State 18

	Expr -> if Expr then . Expr else Expr               (rule 10)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 23

State 19

	Expr -> '\\' '(' var . ':' Type ')' Expr            (rule 7)

	':'            shift, and enter state 22


State 20

	Expr -> let '(' var . ':' Type ')' '=' Expr in Expr    (rule 8)

	':'            shift, and enter state 21


State 21

	Expr -> let '(' var ':' . Type ')' '=' Expr in Expr    (rule 8)

	Int            shift, and enter state 26
	Bool           shift, and enter state 27

	Type           goto state 28

State 22

	Expr -> '\\' '(' var ':' . Type ')' Expr            (rule 7)

	Int            shift, and enter state 26
	Bool           shift, and enter state 27

	Type           goto state 25

State 23

	Expr -> Expr . '<' Expr                             (rule 4)
	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> Expr . Expr                                 (rule 9)
	Expr -> if Expr then Expr . else Expr               (rule 10)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	'<'            shift, and enter state 14
	'+'            shift, and enter state 15
	var            shift, and enter state 6
	if             shift, and enter state 7
	else           shift, and enter state 24
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 13

State 24

	Expr -> if Expr then Expr else . Expr               (rule 10)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 32

State 25

	Expr -> '\\' '(' var ':' Type . ')' Expr            (rule 7)
	Type -> Type . '->' Type                            (rule 13)

	')'            shift, and enter state 31
	'->'           shift, and enter state 30


State 26

	Type -> Int .                                       (rule 11)

	')'            reduce using rule 11
	'->'           reduce using rule 11


State 27

	Type -> Bool .                                      (rule 12)

	')'            reduce using rule 12
	'->'           reduce using rule 12


State 28

	Expr -> let '(' var ':' Type . ')' '=' Expr in Expr    (rule 8)
	Type -> Type . '->' Type                            (rule 13)

	')'            shift, and enter state 29
	'->'           shift, and enter state 30


State 29

	Expr -> let '(' var ':' Type ')' . '=' Expr in Expr    (rule 8)

	'='            shift, and enter state 35


State 30

	Type -> Type '->' . Type                            (rule 13)

	Int            shift, and enter state 26
	Bool           shift, and enter state 27

	Type           goto state 34

State 31

	Expr -> '\\' '(' var ':' Type ')' . Expr            (rule 7)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 33

State 32

	Expr -> Expr . '<' Expr                             (rule 4)
	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> Expr . Expr                                 (rule 9)
	Expr -> if Expr then Expr else Expr .               (rule 10)

	lit            fail
	true           fail
	false          fail
	'<'            reduce using rule 10
	'+'            reduce using rule 10
	var            fail
	if             fail
	then           reduce using rule 10
	else           reduce using rule 10
	'\\'           shift, and enter state 8
	let            reduce using rule 10
	in             reduce using rule 10
	%eof           reduce using rule 10

	Expr           goto state 13

State 33

	Expr -> Expr . '<' Expr                             (rule 4)
	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> '\\' '(' var ':' Type ')' Expr .            (rule 7)
	Expr -> Expr . Expr                                 (rule 9)

	lit            fail
	true           fail
	false          fail
	'<'            reduce using rule 7
	'+'            reduce using rule 7
	var            fail
	if             fail
	then           reduce using rule 7
	else           reduce using rule 7
	'\\'           shift, and enter state 8
	let            reduce using rule 7
	in             reduce using rule 7
	%eof           reduce using rule 7

	Expr           goto state 13

State 34

	Type -> Type . '->' Type                            (rule 13)
	Type -> Type '->' Type .                            (rule 13)

	')'            reduce using rule 13
	'->'           shift, and enter state 30


State 35

	Expr -> let '(' var ':' Type ')' '=' . Expr in Expr    (rule 8)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 36

State 36

	Expr -> Expr . '<' Expr                             (rule 4)
	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> let '(' var ':' Type ')' '=' Expr . in Expr    (rule 8)
	Expr -> Expr . Expr                                 (rule 9)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	'<'            shift, and enter state 14
	'+'            shift, and enter state 15
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9
	in             shift, and enter state 37

	Expr           goto state 13

State 37

	Expr -> let '(' var ':' Type ')' '=' Expr in . Expr    (rule 8)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	var            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 38

State 38

	Expr -> Expr . '<' Expr                             (rule 4)
	Expr -> Expr . '+' Expr                             (rule 5)
	Expr -> let '(' var ':' Type ')' '=' Expr in Expr .    (rule 8)
	Expr -> Expr . Expr                                 (rule 9)

	lit            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	'<'            shift, and enter state 14
	'+'            shift, and enter state 15
	var            shift, and enter state 6
	if             shift, and enter state 7
	then           reduce using rule 8
	else           reduce using rule 8
	'\\'           shift, and enter state 8
	let            shift, and enter state 9
	in             reduce using rule 8
	%eof           reduce using rule 8

	Expr           goto state 13

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 14
Number of terminals: 19
Number of non-terminals: 3
Number of states: 39
